package com.alibaba.edison;

/**
 * 最佳买卖股票时机含冷冻期，medium
 * 给定一个整数数组prices，其中第 prices[i] 表示第 i 天的股票价格 。
 * 设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:
 * 卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。
 * 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
 * <p>
 * 经典的动态规划题目。
 *
 * 对于力扣平台上的股票类型的题目:
 * 121. 买卖股票的最佳时机
 * 122. 买卖股票的最佳时机 II
 * 123. 买卖股票的最佳时机 III
 * 188. 买卖股票的最佳时机 IV
 * 309. 最佳买卖股票时机含冷冻期
 * 714. 买卖股票的最佳时机含手续费
 * 剑指 Offer 63. 股票的最大利润
 *
 * 未能独立求解
 *
 * <p>
 * author: qonyqian
 * created on: 2022/2/13 7:32 下午
 * version：1.0
 * description:
 */
public class LeetCode309 {

    /**
     * 一种常用的方法是将「买入」和「卖出」分开进行考虑：「买入」为负收益，而「卖出」为正收益。在初入股市时，你只有「买入」的权利，只能
     * 获得负收益。而当你「买入」之后，你就有了「卖出」的权利，可以获得正收益。显然，我们需要尽可能地降低负收益而提高正收益，因此我们的
     * 目标总是将收益值最大化。因此，我们可以使用动态规划的方法，维护在股市中每一天结束后可以获得的「累计最大收益」，并以此进行状态转移，
     * 得到最终的答案。
     *
     * 我们用 f[i] 表示第 i 天结束之后的「累计最大收益」。根据题目描述，由于我们最多只能同时买入（持有）一支股票，并且卖出股票后有冷冻
     * 期的限制，因此我们会有三种不同的状态：
     * 1.我们目前持有一支股票，对应的「累计最大收益」记为 f[i][0]；
     * 2.我们目前不持有任何股票，并且处于冷冻期中，对应的「累计最大收益」记为 f[i][1]；
     * 3.我们目前不持有任何股票，并且不处于冷冻期中，对应的「累计最大收益」记为 f[i][2]。
     *
     * 状态转移方程：
     * 1.对于 f[i][0]，我们目前持有的这一支股票可以是在第 i-1 天就已经持有的，对应的状态为 f[i-1][0]；或者是第 i 天买入的，那么
     * 第 i-1 天就不能持有股票并且不处于冷冻期中，对应的状态为 f[i-1][2] 加上买入股票的负收益 prices[i]。因此状态转移方程为：
     *           f[i][0]=max(f[i−1][0],f[i−1][2]−prices[i])
     * 2.对于 f[i][1]，我们在第 i 天结束之后处于冷冻期的原因是在当天卖出了股票，那么说明在第 i−1 天时我们必须持有一支股票，对应的状态
     * 为 f[i-1][0] 加上卖出股票的正收益 prices[i]。因此状态转移方程为：
     *           f[i][1]=f[i−1][0]+prices[i]
     * 3.对于 f[i][2]，我们在第 i 天结束之后不持有任何股票并且不处于冷冻期，说明当天没有进行任何操作，即第 i-1 天时不持有任何股票：如果
     * 处于冷冻期，对应的状态为 f[i-1][1]；如果不处于冷冻期，对应的状态为 f[i-1][2]。因此状态转移方程为：
     *           f[i][2]=max(f[i−1][1],f[i−1][2])
     * 这样我们就得到了所有的状态转移方程。如果一共有 nn 天，那么最终的答案即为：
     *           max(f[n−1][0],f[n−1][1],f[n−1][2])
     * 注意到如果在最后一天（第 n-1 天）结束之后，手上仍然持有股票，那么显然是没有任何意义的。因此更加精确地，最终的答案实际上
     * 是 f[n-1][1] 和 f[n-1][2] 中的较大值，即：
     *           max(f[n−1][1],f[n−1][2])
     *
     * 边界条件：
     * 在第 0 天时，如果持有股票，那么只能是在第 0 天买入的，对应负收益 −prices[0]；如果不持有股票，那么收益为零。注意到第 0 天实际上是
     * 不存在处于冷冻期的情况的，但我们仍然可以将对应的状态 f[0][1] 置为零。
     *
     * @param prices
     * @return
     */
    public int maxProfit(int[] prices) {
        int length = prices.length;
        if (length == 0) {
            return 0;
        }
        // f[i][0]: 手上持有股票的最大收益
        // f[i][1]: 手上不持有股票，并且处于冷冻期中的累计最大收益
        // f[i][2]: 手上不持有股票，并且不在冷冻期中的累计最大收益
        int[][] f = new int[length][3];
        f[0][0] = -prices[0];
        for (int i = 1; i < length; ++i) {
            f[i][0] = Math.max(f[i - 1][0], f[i - 1][2] - prices[i]);
            f[i][1] = f[i - 1][0] + prices[i];
            f[i][2] = Math.max(f[i - 1][1], f[i - 1][2]);
        }
        return Math.max(f[length - 1][1], f[length - 1][2]);
    }
}
